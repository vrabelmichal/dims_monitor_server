# Generated by Django 4.0.2 on 2022-02-21 22:55

from django.db import migrations, models
import django.db.models.deletion
import rest_server.models.ufo_capture_output


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DiskPartition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device', models.CharField(max_length=25)),
                ('mountpoint', models.CharField(max_length=255)),
                ('fstype', models.CharField(max_length=25)),
                ('opts', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='OhmHardwareInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('type', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='OhmSensorInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('type', models.CharField(max_length=255)),
                ('hardware', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rest_server.ohmhardwareinformation')),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_utc', models.DateTimeField()),
                ('post_utc', models.DateTimeField()),
                ('retrieved_utc', models.DateTimeField()),
                ('hash', models.BigIntegerField(unique=True)),
                ('fully_processed', models.BooleanField(default=False)),
                ('integrity_errors', models.JSONField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Station',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='UfoCaptureOutputEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('snapshot_filename', models.CharField(blank=True, help_text='Filename of a file on the remote station. One frame at the trigger will be saved as a still image. Exclusive with PeakHold setting.', max_length=260, null=True)),
                ('peak_hold_filename', models.CharField(blank=True, help_text='Filename of a file on the remote station. Automatic composite still image which contains the peak brightness of each pixel during the detection will be saved as a still image.', max_length=260, null=True)),
                ('thumbnail_filename', models.CharField(blank=True, help_text='Filename of a file on the remote station. Small size jpeg image for realtime transfer.', max_length=260, null=True)),
                ('det_level_preview', models.ImageField(blank=True, help_text='Detected pixels the brightness of which was changed more than "Detect Lev"', null=True, upload_to=rest_server.models.ufo_capture_output.preview_image_dir_path)),
                ('long_term_avg_preview', models.ImageField(blank=True, help_text='Long term averaged brightness of the pixel.', null=True, upload_to=rest_server.models.ufo_capture_output.preview_image_dir_path)),
                ('peak_hold_preview', models.ImageField(blank=True, help_text='Automatic composite still image which contains the peak brightness of each pixel during the detection will be saved as a still image. Peak hold is useful in nighttime luminous event observation. Exclusive with SnapShot setting.', null=True, upload_to=rest_server.models.ufo_capture_output.preview_image_dir_path)),
                ('map_filename', models.CharField(blank=True, help_text='Filename of a file on the remote station. *M.bmp which contains layered information of the event.', max_length=260, null=True)),
                ('clip_filename', models.CharField(help_text='Filename of a clip file on the remote station.', max_length=260)),
                ('xml_filename', models.CharField(blank=True, help_text='Filename of a xml file on the remote station. ', max_length=260, null=True)),
                ('type', models.CharField(choices=[('rec', 'Recording'), ('trg', 'Trigger'), ('tmp', 'Temporary')], help_text='Type of the UFOCapture entry determined from the name of a file', max_length=3)),
                ('filename_datetime', models.DateTimeField(help_text='Datetime value derived from from UFOCapture file.', null=True)),
                ('version', models.CharField(blank=True, help_text='Value of attribute "version" of ufocapture_record inside UFOCapture XML file.', max_length=20, null=True)),
                ('xml_datetime', models.DateTimeField(help_text='Datetime value from from UFOCapture XML file.', null=True)),
                ('trig', models.IntegerField(help_text='Value of attribute "trig" of ufocapture_record inside UFOCapture XML file.', null=True)),
                ('frames', models.IntegerField(help_text='Value of attribute "frames" of ufocapture_record inside UFOCapture XML file.', null=True)),
                ('lng', models.FloatField(help_text='Value of attribute "lng" of ufocapture_record inside UFOCapture XML file.', null=True)),
                ('lat', models.FloatField(help_text='Value of attribute "lat" of ufocapture_record inside UFOCapture XML file.', null=True)),
                ('alt', models.FloatField(help_text='Value of attribute "alt" of ufocapture_record inside UFOCapture XML file.', null=True)),
                ('tz', models.CharField(blank=True, help_text='Value of attribute "tz" of ufocapture_record inside UFOCapture XML file.', max_length=20, null=True)),
                ('u2', models.IntegerField(help_text='Value of attribute "u2" of ufocapture_record inside UFOCapture XML file.')),
                ('cx', models.IntegerField(help_text='Value of attribute "cx" of ufocapture_record inside UFOCapture XML file.')),
                ('cy', models.IntegerField(help_text='Value of attribute "cy" of ufocapture_record inside UFOCapture XML file.')),
                ('fps', models.FloatField(help_text='Value of attribute "fps" of ufocapture_record inside UFOCapture XML file.', null=True)),
                ('head', models.IntegerField(help_text='Value of attribute "head" of ufocapture_record inside UFOCapture XML file.', null=True)),
                ('tail', models.IntegerField(help_text='Value of attribute "tail" of ufocapture_record inside UFOCapture XML file.', null=True)),
                ('diff', models.IntegerField(help_text='Value of attribute "diff" of ufocapture_record inside UFOCapture XML file.', null=True)),
                ('sipos', models.IntegerField(help_text='Value of attribute "sipos" of ufocapture_record inside UFOCapture XML file.', null=True)),
                ('sisize', models.IntegerField(help_text='Value of attribute "sisize" of ufocapture_record inside UFOCapture XML file.', null=True)),
                ('dlev', models.IntegerField(help_text='Value of attribute "dlev" of ufocapture_record inside UFOCapture XML file.', null=True)),
                ('dsize', models.IntegerField(help_text='Value of attribute "dsize" of ufocapture_record inside UFOCapture XML file.', null=True)),
                ('countrycode', models.CharField(blank=True, help_text='Value of attribute "countrycode" of ufocapture_record inside UFOCapture XML file.', max_length=2, null=True)),
                ('lid', models.CharField(blank=True, help_text='Value of attribute "lid" of ufocapture_record inside UFOCapture XML file.', max_length=16, null=True)),
                ('observer', models.CharField(blank=True, help_text='Value of attribute "observer" of ufocapture_record inside UFOCapture XML file.', max_length=32, null=True)),
                ('sid', models.CharField(blank=True, help_text='Value of attribute "sid" of ufocapture_record inside UFOCapture XML file.', max_length=16, null=True)),
                ('cam', models.CharField(blank=True, help_text='Value of attribute "cam" of ufocapture_record inside UFOCapture XML file.', max_length=32, null=True)),
                ('lens', models.CharField(blank=True, help_text='Value of attribute "lens" of ufocapture_record inside UFOCapture XML file.', max_length=32, null=True)),
                ('cap', models.CharField(blank=True, help_text='Value of attribute "cap" of ufocapture_record inside UFOCapture XML file.', max_length=32, null=True)),
                ('comment', models.CharField(blank=True, help_text='Value of attribute "comment" of ufocapture_record inside UFOCapture XML file.', max_length=64, null=True)),
                ('interlace', models.IntegerField(help_text='Value of attribute "interlace" of ufocapture_record inside UFOCapture XML file.', null=True)),
                ('bbf', models.IntegerField(help_text='Value of attribute "bbf" of ufocapture_record inside UFOCapture XML file.', null=True)),
                ('dropframe', models.IntegerField(help_text='Value of attribute "dropframe" of ufocapture_record inside UFOCapture XML file.', null=True)),
                ('fourcc', models.CharField(blank=True, help_text='Value of attribute "fourcc" of ufocapture_record inside UFOCapture XML file.', max_length=16, null=True)),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rest_server.report')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rest_server.station')),
            ],
        ),
        migrations.AddField(
            model_name='report',
            name='station',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rest_server.station'),
        ),
        migrations.CreateModel(
            name='Process',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='The process name. On Windows the return value is cached after first call. Not on POSIX because the process name may change.', max_length=255, null=True)),
                ('pid', models.IntegerField(help_text='Process PID')),
                ('ppid', models.IntegerField(help_text='Parent process PID')),
                ('exe', models.CharField(blank=True, help_text='The process executable as an absolute path. On some systems this may also be an empty string. The return value is cached after first call.', max_length=255, null=True)),
                ('cmdline', models.CharField(blank=True, help_text='The command line this process has been called with as a list of strings. ', max_length=4096, null=True)),
                ('cwd', models.CharField(blank=True, help_text='The process current working directory as an absolute path.', max_length=4096, null=True)),
                ('username', models.CharField(blank=True, help_text='The name of the user that owns the process. On UNIX this is calculated by using real process uid.', max_length=64, null=True)),
                ('create_time', models.FloatField(help_text='The process creation time as a floating point number expressed in seconds since the epoch.')),
                ('cpu_percent', models.FloatField(help_text='A float representing the process CPU utilization as a percentage which can also be > 100.0 in case of a process running multiple threads on different CPUs. See: https://psutil.readthedocs.io/en/latest/#psutil.Process.cpu_percent')),
                ('memory_info_rss', models.IntegerField(help_text='The non-swapped physical memory a process has used.', verbose_name='Resident Set Size')),
                ('memory_info_vms', models.IntegerField(help_text='The total amount of virtual memory used by the process.', verbose_name='Virtual Memory Size')),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rest_server.report')),
            ],
        ),
        migrations.CreateModel(
            name='OhmSensorParameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=255)),
                ('value', models.FloatField()),
                ('default_value', models.FloatField()),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rest_server.ohmsensorinformation')),
            ],
        ),
        migrations.CreateModel(
            name='OhmSensorMeasurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(help_text='Datetime of the measurement')),
                ('value', models.FloatField()),
                ('value_max', models.FloatField()),
                ('value_min', models.FloatField()),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rest_server.report')),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rest_server.ohmsensorinformation')),
            ],
        ),
        migrations.CreateModel(
            name='MemoryUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('virtual_total', models.BigIntegerField(help_text='total physical memory (exclusive swap)')),
                ('virtual_available', models.BigIntegerField(help_text='the memory that can be given instantly to processes without the system going into swap')),
                ('virtual_used', models.BigIntegerField(help_text='memory used, calculated differently depending on the platform and designed for informational purposes only. total - free does not necessarily match used.')),
                ('virtual_free', models.BigIntegerField(help_text='memory not being used at all (zeroed) that is readily available; note that this doesn’t reflect the actual memory available (use available instead). total - used does not necessarily match free.')),
                ('virtual_active', models.BigIntegerField(default=-1, help_text='(UNIX): memory currently in use or very recently used, and so it is in RAM.')),
                ('virtual_inactive', models.BigIntegerField(default=-1, help_text='(UNIX): memory that is marked as not used.')),
                ('virtual_buffers', models.BigIntegerField(default=-1, help_text='(Linux, BSD): cache for things like file system metadata.')),
                ('virtual_cached', models.BigIntegerField(default=-1, help_text='(Linux, BSD): cache for various things.')),
                ('virtual_shared', models.BigIntegerField(default=-1, help_text='(Linux, BSD): memory that may be simultaneously accessed by multiple processes.')),
                ('virtual_slab', models.BigIntegerField(default=-1, help_text='(Linux): in-kernel data structures cache.')),
                ('virtual_wired', models.BigIntegerField(default=-1, help_text='(BSD, macOS): memory that is marked to always stay in RAM. It is never moved to disk.')),
                ('swap_total', models.BigIntegerField(help_text='total swap memory in bytes')),
                ('swap_used', models.BigIntegerField(help_text='used swap memory in bytes')),
                ('swap_free', models.BigIntegerField(help_text='free swap memory in bytes')),
                ('swap_percent', models.FloatField(help_text='the percentage usage calculated as (total - available) / total * 100')),
                ('swap_sin', models.BigIntegerField(help_text='the number of bytes the system has swapped in from disk (cumulative)')),
                ('swap_sout', models.BigIntegerField(help_text='the number of bytes the system has swapped out from disk (cumulative)')),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rest_server.report')),
            ],
        ),
        migrations.CreateModel(
            name='EnvironmentLogUpload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('captured_hour', models.DateTimeField(help_text='Datetime derived from the log file name (EnvData file).')),
                ('log_filename', models.CharField(help_text='Filename of a file on the remote station. ', max_length=260, null=True)),
                ('is_historical', models.BooleanField(help_text='Indicates if file is being presently filled-in on the station')),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rest_server.report')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rest_server.station')),
            ],
        ),
        migrations.CreateModel(
            name='EnvironmentLogMeasurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('measurement_datetime', models.DateTimeField(help_text='Datetime of the measurement.')),
                ('temperature_in', models.FloatField(help_text='Value of column "temperature_in" inside the Arduino data log file (EnvData). Unit: degrees of Celsius.')),
                ('temperature_out', models.FloatField(help_text='Value of column "temperature_out" inside the Arduino data log file (EnvData). Unit: degrees of Celsius.')),
                ('pressure_in', models.FloatField(help_text='Value of column "pressure_in" inside the Arduino data log file (EnvData). Unit: hPa.')),
                ('pressure_out', models.FloatField(help_text='Value of column "pressure_out" inside the Arduino data log file (EnvData). Unit: hPa.')),
                ('humidity_in', models.FloatField(help_text='Value of column "humidity_in" inside the Arduino data log file (EnvData). Unit: Percent.')),
                ('humidity_out', models.FloatField(help_text='Value of column "humidity_out" inside the Arduino data log file (EnvData). Unit: Percent.')),
                ('brightness', models.FloatField(help_text='Brightness from CdS sensor. Value of column "brightness" inside the Arduino data log file (EnvData).')),
                ('fan1_rpm', models.FloatField(help_text='Value of column "fan1_rpm" inside the Arduino data log file (EnvData).')),
                ('fan2_rpm', models.FloatField(help_text='Value of column "fan2_rpm" inside the Arduino data log file (EnvData).')),
                ('fan1_pwm', models.FloatField(help_text='Value of column "fan1_pwm" inside the Arduino data log file (EnvData).')),
                ('fan2_pwm', models.FloatField(help_text='Value of column "fan2_pwm" inside the Arduino data log file (EnvData).')),
                ('log_upload', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rest_server.environmentlogupload')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rest_server.station')),
            ],
        ),
        migrations.CreateModel(
            name='DiskUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total', models.BigIntegerField()),
                ('used', models.BigIntegerField()),
                ('free', models.BigIntegerField()),
                ('disk_partition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rest_server.diskpartition')),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rest_server.report')),
            ],
        ),
        migrations.CreateModel(
            name='CpuStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cpu_id', models.CharField(default='all', max_length=15, verbose_name='Unique identifier of a CPU ("all" for measurements across all CPUs)')),
                ('cpu_freq_mean', models.FloatField(verbose_name='Mean CPU Frequency')),
                ('cpu_freq_min', models.FloatField(verbose_name='Minimum CPU Frequency')),
                ('cpu_freq_max', models.FloatField(verbose_name='Maximum CPU Frequency')),
                ('cpu_time_percent_user_mean', models.FloatField(help_text='Mean utilization percentage for "user" CPU time')),
                ('cpu_time_percent_system_mean', models.FloatField(help_text='Mean utilization percentage for "system" CPU time')),
                ('cpu_time_percent_idle_mean', models.FloatField(help_text='Mean utilization percentage for "idle" CPU time')),
                ('cpu_time_percent_nice_mean', models.FloatField(help_text='Mean utilization percentage for "nice" CPU time (Linux)')),
                ('cpu_time_percent_iowait_mean', models.FloatField(help_text='Mean utilization percentage for "iowait" CPU time (Linux)')),
                ('cpu_time_percent_irq_mean', models.FloatField(help_text='Mean utilization percentage for "irq" CPU time (Linux)')),
                ('cpu_time_percent_softirq_mean', models.FloatField(help_text='Mean utilization percentage for "softirq" CPU time (Linux)')),
                ('cpu_time_percent_steal_mean', models.FloatField(help_text='Mean utilization percentage for "steal" CPU time (Linux)')),
                ('cpu_time_percent_guest_mean', models.FloatField(help_text='Mean utilization percentage for "guest" CPU time (Linux)')),
                ('cpu_time_percent_guest_nice_mean', models.FloatField(help_text='Mean utilization percentage for "guest_nice" CPU time (Linux)')),
                ('cpu_time_percent_interrupt_mean', models.FloatField(help_text='Mean utilization percentage for "interrupt" CPU time (Windows)')),
                ('cpu_time_percent_dpc_mean', models.FloatField(help_text='Mean utilization percentage for "dpc" CPU time (Windows)')),
                ('cpu_time_percent_user_max', models.FloatField(help_text='Max utilization percentage for "user" CPU time')),
                ('cpu_time_percent_system_max', models.FloatField(help_text='Max utilization percentage for "system" CPU time')),
                ('cpu_time_percent_idle_max', models.FloatField(help_text='Max utilization percentage for "idle" CPU time')),
                ('cpu_time_percent_nice_max', models.FloatField(help_text='Max utilization percentage for "nice" CPU time (Linux)')),
                ('cpu_time_percent_iowait_max', models.FloatField(help_text='Max utilization percentage for "iowait" CPU time (Linux)')),
                ('cpu_time_percent_irq_max', models.FloatField(help_text='Max utilization percentage for "irq" CPU time (Linux)')),
                ('cpu_time_percent_softirq_max', models.FloatField(help_text='Max utilization percentage for "softirq" CPU time (Linux)')),
                ('cpu_time_percent_steal_max', models.FloatField(help_text='Max utilization percentage for "steal" CPU time (Linux)')),
                ('cpu_time_percent_guest_max', models.FloatField(help_text='Max utilization percentage for "guest" CPU time (Linux)')),
                ('cpu_time_percent_guest_nice_max', models.FloatField(help_text='Max utilization percentage for "guest_nice" CPU time (Linux)')),
                ('cpu_time_percent_interrupt_max', models.FloatField(help_text='Max utilization percentage for "interrupt" CPU time (Windows)')),
                ('cpu_time_percent_dpc_max', models.FloatField(help_text='Max utilization percentage for "dpc" CPU time (Windows)')),
                ('cpu_time_percent_user_min', models.FloatField(help_text='Min utilization percentage for "user" CPU time')),
                ('cpu_time_percent_system_min', models.FloatField(help_text='Min utilization percentage for "system" CPU time')),
                ('cpu_time_percent_idle_min', models.FloatField(help_text='Min utilization percentage for "idle" CPU time')),
                ('cpu_time_percent_nice_min', models.FloatField(help_text='Min utilization percentage for "nice" CPU time (Linux)')),
                ('cpu_time_percent_iowait_min', models.FloatField(help_text='Min utilization percentage for "iowait" CPU time (Linux)')),
                ('cpu_time_percent_irq_min', models.FloatField(help_text='Min utilization percentage for "irq" CPU time (Linux)')),
                ('cpu_time_percent_softirq_min', models.FloatField(help_text='Min utilization percentage for "softirq" CPU time (Linux)')),
                ('cpu_time_percent_steal_min', models.FloatField(help_text='Min utilization percentage for "steal" CPU time (Linux)')),
                ('cpu_time_percent_guest_min', models.FloatField(help_text='Min utilization percentage for "guest" CPU time (Linux)')),
                ('cpu_time_percent_guest_nice_min', models.FloatField(help_text='Min utilization percentage for "guest_nice" CPU time (Linux)')),
                ('cpu_time_percent_interrupt_min', models.FloatField(help_text='Max utilization percentage for "interrupt" CPU time (Windows)')),
                ('cpu_time_percent_dpc_min', models.FloatField(help_text='Max utilization percentage for "dpc" CPU time (Windows)')),
                ('cpu_time_user', models.FloatField(help_text='Time spent by normal processes executing in user mode (user); on Linux this also includes guest time')),
                ('cpu_time_system', models.FloatField(help_text='Time spent by processes executing in kernel mode (system)')),
                ('cpu_time_idle', models.FloatField(help_text='Time spent doing nothing (idle)')),
                ('cpu_time_nice', models.FloatField(help_text='Time spent by niced (prioritized) processes executing in user mode (UNIX); on Linux this also includes guest_nice time')),
                ('cpu_time_iowait', models.FloatField(help_text='Time spent waiting for I/O to complete. This is not accounted in idle time counter (Linux)')),
                ('cpu_time_irq', models.FloatField(help_text='Time spent for servicing hardware interrupts (Linux, BSD)')),
                ('cpu_time_softirq', models.FloatField(help_text='Time spent for servicing software interrupts (Linux)')),
                ('cpu_time_steal', models.FloatField(help_text='Time spent by other operating systems running in a virtualized environment (Linux)')),
                ('cpu_time_guest', models.FloatField(help_text='Time spent running a virtual CPU for guest operating systems under the control of the Linux kernel (Linux)')),
                ('cpu_time_guest_nice', models.FloatField(help_text='Time spent running a niced guest (Linux)')),
                ('cpu_time_interrupt', models.FloatField(help_text='Time spent for servicing hardware interrupts (Windows)')),
                ('cpu_time_dpc', models.FloatField(help_text='Time spent servicing deferred procedure calls (DPCs) (Windows); DPCs are interrupts that run at a lower priority than standard interrupts.')),
                ('load_avg_1min', models.FloatField(help_text='The average system load over the last 1 min')),
                ('load_avg_5min', models.FloatField(help_text='The average system load over the last 5 min')),
                ('load_avg_15min', models.FloatField(help_text='The average system load over the last 15 min')),
                ('load_avg_percent_1min', models.FloatField(help_text='The average system load over the last 1 min in percent')),
                ('load_avg_percent_5min', models.FloatField(help_text='The average system load over the last 5 min in percent')),
                ('load_avg_percent_15min', models.FloatField(help_text='The average system load over the last 15 min in percent')),
                ('cpu_stat_ctx_switches', models.FloatField(help_text='Number of context switches (voluntary + involuntary) since boot.')),
                ('cpu_stat_interrupts', models.FloatField(help_text='Number of interrupts since boot.')),
                ('cpu_stat_soft_interrupts', models.FloatField(help_text='Nnumber of software interrupts since boot. Always set to 0 on Windows and SunOS.')),
                ('cpu_stat_syscalls', models.FloatField(help_text='Number of system calls since boot. Always set to 0 on Linux.')),
                ('cpu_percent_min', models.FloatField(help_text='Mean system-wide CPU utilization as a percentage')),
                ('cpu_percent_max', models.FloatField(help_text='Maximum system-wide CPU utilization as a percentage')),
                ('cpu_percent_mean', models.FloatField(help_text='Minimum system-wide CPU utilization as a percentage')),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rest_server.report')),
            ],
        ),
        migrations.AddConstraint(
            model_name='ufocaptureoutputentry',
            constraint=models.UniqueConstraint(fields=('report', 'clip_filename'), name='unique_pair_report_clip'),
        ),
        migrations.AddConstraint(
            model_name='ufocaptureoutputentry',
            constraint=models.UniqueConstraint(fields=('station', 'clip_filename'), name='unique_pair_station_clip'),
        ),
        migrations.AddConstraint(
            model_name='environmentlogupload',
            constraint=models.UniqueConstraint(fields=('report', 'captured_hour'), name='unique_pair_report_captured_hour'),
        ),
        migrations.AddConstraint(
            model_name='environmentlogmeasurement',
            constraint=models.UniqueConstraint(fields=('measurement_datetime', 'log_upload'), name='unique_pair_datetime_log_upload'),
        ),
        migrations.AddConstraint(
            model_name='environmentlogmeasurement',
            constraint=models.UniqueConstraint(fields=('measurement_datetime', 'station'), name='unique_pair_datetime_station'),
        ),
    ]
